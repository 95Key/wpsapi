// Package wpsapi contains the types for schema 'del'.
// i say package is wpsapi
package wpsapi

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Commentmetum represents a row from '` + GetTableName("commentmeta") + `'.
type Commentmetum struct {
	MetaID    uint64         `json:"meta_id"`    // meta_id
	CommentID uint64         `json:"comment_id"` // comment_id
	MetaKey   sql.NullString `json:"meta_key"`   // meta_key
	MetaValue sql.NullString `json:"meta_value"` // meta_value

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Commentmetum exists in the database.
func (c *Commentmetum) Exists() bool {
	return c._exists
}

// Deled provides information if the Commentmetum has been deled from the database.
func (c *Commentmetum) Deled() bool {
	return c._deleted
}

// Insert inserts the Commentmetum to the database.
func (c *Commentmetum) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	var sqlstr = `INSERT INTO ` + GetTableName("commentmeta") + ` (` +
		`comment_id, meta_key, meta_value` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.CommentID, c.MetaKey, c.MetaValue)
	res, err := db.Exec(sqlstr, c.CommentID, c.MetaKey, c.MetaValue)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	c.MetaID = uint64(id)
	c._exists = true

	return nil
}

// Update updates the Commentmetum in the database.
func (c *Commentmetum) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	var sqlstr = `UPDATE ` + GetTableName("commentmeta") + ` SET ` +
		`comment_id = ?, meta_key = ?, meta_value = ?` +
		` WHERE meta_id = ?`

	// run query
	XOLog(sqlstr, c.CommentID, c.MetaKey, c.MetaValue, c.MetaID)
	_, err = db.Exec(sqlstr, c.CommentID, c.MetaKey, c.MetaValue, c.MetaID)
	return err
}

// Save saves the Commentmetum to the database.
func (c *Commentmetum) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Delete deletes the Commentmetum from the database.
func (c *Commentmetum) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	var sqlstr = `DELETE FROM ` + GetTableName("commentmeta") + ` WHERE meta_id = ?`

	// run query
	XOLog(sqlstr, c.MetaID)
	_, err = db.Exec(sqlstr, c.MetaID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// CommentmetaByCommentID retrieves a row from '` + GetTableName("commentmeta") + `' as a Commentmetum.
//
// Generated from index 'comment_id'.
func CommentmetaByCommentID(db XODB, commentID uint64) ([]*Commentmetum, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`meta_id, comment_id, meta_key, meta_value ` +
		`FROM ` + GetTableName("commentmeta") + ` ` +
		`WHERE comment_id = ?`

	// run query
	XOLog(sqlstr, commentID)
	q, err := db.Query(sqlstr, commentID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Commentmetum{}
	for q.Next() {
		c := Commentmetum{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.MetaID, &c.CommentID, &c.MetaKey, &c.MetaValue)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// CommentmetumByMetaID retrieves a row from '` + GetTableName("commentmeta") + `' as a Commentmetum.
//
// Generated from index 'commentmeta_meta_id_pkey'.
func CommentmetumByMetaID(db XODB, metaID uint64) (*Commentmetum, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`meta_id, comment_id, meta_key, meta_value ` +
		`FROM ` + GetTableName("commentmeta") + ` ` +
		`WHERE meta_id = ?`

	// run query
	XOLog(sqlstr, metaID)
	c := Commentmetum{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, metaID).Scan(&c.MetaID, &c.CommentID, &c.MetaKey, &c.MetaValue)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// CommentmetaByMetaKey retrieves a row from '` + GetTableName("commentmeta") + `' as a Commentmetum.
//
// Generated from index 'meta_key'.
func CommentmetaByMetaKey(db XODB, metaKey sql.NullString) ([]*Commentmetum, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`meta_id, comment_id, meta_key, meta_value ` +
		`FROM ` + GetTableName("commentmeta") + ` ` +
		`WHERE meta_key = ?`

	// run query
	XOLog(sqlstr, metaKey)
	q, err := db.Query(sqlstr, metaKey)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Commentmetum{}
	for q.Next() {
		c := Commentmetum{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.MetaID, &c.CommentID, &c.MetaKey, &c.MetaValue)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}
