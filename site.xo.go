// Package wpsapi contains the types for schema 'del'.
// i say package is wpsapi
package wpsapi

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Site represents a row from '` + GetTableName("site") + `'.
type Site struct {
	ID     int64  `json:"id"`     // id
	Domain string `json:"domain"` // domain
	Path   string `json:"path"`   // path

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Site exists in the database.
func (s *Site) Exists() bool {
	return s._exists
}

// Deled provides information if the Site has been deled from the database.
func (s *Site) Deled() bool {
	return s._deleted
}

// Insert inserts the Site to the database.
func (s *Site) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	var sqlstr = `INSERT INTO ` + GetTableName("site") + ` (` +
		`domain, path` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, s.Domain, s.Path)
	res, err := db.Exec(sqlstr, s.Domain, s.Path)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.ID = int64(id)
	s._exists = true

	return nil
}

// Update updates the Site in the database.
func (s *Site) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	var sqlstr = `UPDATE ` + GetTableName("site") + ` SET ` +
		`domain = ?, path = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, s.Domain, s.Path, s.ID)
	_, err = db.Exec(sqlstr, s.Domain, s.Path, s.ID)
	return err
}

// Save saves the Site to the database.
func (s *Site) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Delete deletes the Site from the database.
func (s *Site) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	var sqlstr = `DELETE FROM ` + GetTableName("site") + ` WHERE id = ?`

	// run query
	XOLog(sqlstr, s.ID)
	_, err = db.Exec(sqlstr, s.ID)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// SitesByDomainPath retrieves a row from '` + GetTableName("site") + `' as a Site.
//
// Generated from index 'domain'.
func SitesByDomainPath(db XODB, domain string, path string) ([]*Site, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`id, domain, path ` +
		`FROM ` + GetTableName("site") + ` ` +
		`WHERE domain = ? AND path = ?`

	// run query
	XOLog(sqlstr, domain, path)
	q, err := db.Query(sqlstr, domain, path)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Site{}
	for q.Next() {
		s := Site{
			_exists: true,
		}

		// scan
		err = q.Scan(&s.ID, &s.Domain, &s.Path)
		if err != nil {
			return nil, err
		}

		res = append(res, &s)
	}

	return res, nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// SiteByID retrieves a row from '` + GetTableName("site") + `' as a Site.
//
// Generated from index 'site_id_pkey'.
func SiteByID(db XODB, id int64) (*Site, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`id, domain, path ` +
		`FROM ` + GetTableName("site") + ` ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	s := Site{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&s.ID, &s.Domain, &s.Path)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
