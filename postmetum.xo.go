// Package wpsapi contains the types for schema 'del'.
// i say package is wpsapi
package wpsapi

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/patrickmn/go-cache"

	"github.com/95key/util"
)

// Postmetum represents a row from '` + GetTableName("postmeta") + `'.
type Postmetum struct {
	MetaID    uint64 `json:"meta_id"`    // meta_id
	PostID    uint64 `json:"post_id"`    // post_id
	MetaKey   string `json:"meta_key"`   // meta_key
	MetaValue string `json:"meta_value"` // meta_value

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Postmetum exists in the database.
func (p *Postmetum) Exists() bool {
	return p._exists
}

// Deled provides information if the Postmetum has been deled from the database.
func (p *Postmetum) Deled() bool {
	return p._deleted
}

// Insert inserts the Postmetum to the database.
func (p *Postmetum) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	var sqlstr = `INSERT INTO ` + GetTableName("postmeta") + ` (` +
		`post_id, meta_key, meta_value` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.PostID, p.MetaKey, p.MetaValue)
	res, err := db.Exec(sqlstr, p.PostID, p.MetaKey, p.MetaValue)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.MetaID = uint64(id)
	p._exists = true

	return nil
}

// Update updates the Postmetum in the database.
func (p *Postmetum) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	var sqlstr = `UPDATE ` + GetTableName("postmeta") + ` SET ` +
		`post_id = ?, meta_key = ?, meta_value = ?` +
		` WHERE meta_id = ?`

	// run query
	XOLog(sqlstr, p.PostID, p.MetaKey, p.MetaValue, p.MetaID)
	_, err = db.Exec(sqlstr, p.PostID, p.MetaKey, p.MetaValue, p.MetaID)
	return err
}

// Save saves the Postmetum to the database.
func (p *Postmetum) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Delete deletes the Postmetum from the database.
func (p *Postmetum) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	var sqlstr = `DELETE FROM ` + GetTableName("postmeta") + ` WHERE meta_id = ?`

	// run query
	XOLog(sqlstr, p.MetaID)
	_, err = db.Exec(sqlstr, p.MetaID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// PostmetaByMetaKey retrieves a row from '` + GetTableName("postmeta") + `' as a Postmetum.
//
// Generated from index 'meta_key'.
func PostmetaByMetaKey(db XODB, metaKey string) ([]*Postmetum, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`meta_id, post_id, meta_key, meta_value ` +
		`FROM ` + GetTableName("postmeta") + ` ` +
		`WHERE meta_key = ?`

	// run query
	XOLog(sqlstr, metaKey)
	q, err := db.Query(sqlstr, metaKey)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Postmetum{}
	for q.Next() {
		p := Postmetum{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.MetaID, &p.PostID, &p.MetaKey, &p.MetaValue)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// PostmetaByPostID retrieves a row from '` + GetTableName("postmeta") + `' as a Postmetum.
//
// Generated from index 'post_id'.
func PostmetaByPostID(db XODB, postID uint64) ([]*Postmetum, error) {
	v, found := c.Get("/postmeta/post_id/" + util.Uint64ToString(postID))
	if found {
		return v.([]*Postmetum), nil
	}

	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`meta_id, post_id, meta_key, meta_value ` +
		`FROM ` + GetTableName("postmeta") + ` ` +
		`WHERE post_id = ?`

	// run query
	XOLog("没进缓存"+sqlstr, postID)
	q, err := db.Query(sqlstr, postID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Postmetum{}
	for q.Next() {
		p := Postmetum{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.MetaID, &p.PostID, &p.MetaKey, &p.MetaValue)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	c.Set("/postmeta/post_id/"+util.Uint64ToString(postID), res, cache.DefaultExpiration)
	return res, nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// PostmetumByMetaID retrieves a row from '` + GetTableName("postmeta") + `' as a Postmetum.
//
// Generated from index 'postmeta_meta_id_pkey'.
func PostmetumByMetaID(db XODB, metaID uint64) (*Postmetum, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`meta_id, post_id, meta_key, meta_value ` +
		`FROM ` + GetTableName("postmeta") + ` ` +
		`WHERE meta_id = ?`

	// run query
	XOLog(sqlstr, metaID)
	p := Postmetum{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, metaID).Scan(&p.MetaID, &p.PostID, &p.MetaKey, &p.MetaValue)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// PostmetaByPostIDMetaKey retrieves a row from 'del.postmeta' as a Postmetum.
//
// Generated from index 'postmeta_post_id_meta_key_pkey'.
func PostmetaByPostIDMetaKey(db XODB, postID uint64, metaKey string) (*Postmetum, error) {
	v, found := c.Get("/postmeta/post_id&meta_key/" + util.Uint64ToString(postID) + "&" + metaKey)
	if found {
		return v.(*Postmetum), nil
	}
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`meta_id, post_id, meta_key, meta_value ` +
		`FROM ` + GetTableName("postmeta") + ` ` +
		`WHERE post_id = ? AND meta_key = ?`

	// run query
	XOLog(sqlstr, postID, metaKey)
	p := Postmetum{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, postID, metaKey).Scan(&p.MetaID, &p.PostID, &p.MetaKey, &p.MetaValue)
	if err != nil {
		return nil, err
	}
	c.Set("/postmeta/post_id&meta_key/"+util.Uint64ToString(postID)+"&"+metaKey, &p, cache.DefaultExpiration)
	return &p, nil
}
