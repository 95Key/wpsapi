// Package wpsapi contains the types for schema 'del'.
// i say package is wpsapi
package wpsapi

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// TermTaxonomy represents a row from '` + GetTableName("term_taxonomy") + `'.
type TermTaxonomy struct {
	TermTaxonomyID uint64 `json:"term_taxonomy_id"` // term_taxonomy_id
	TermID         uint64 `json:"term_id"`          // term_id
	Taxonomy       string `json:"taxonomy"`         // taxonomy
	Description    string `json:"description"`      // description
	Parent         uint64 `json:"parent"`           // parent
	Count          int64  `json:"count"`            // count

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TermTaxonomy exists in the database.
func (tt *TermTaxonomy) Exists() bool {
	return tt._exists
}

// Deled provides information if the TermTaxonomy has been deled from the database.
func (tt *TermTaxonomy) Deled() bool {
	return tt._deleted
}

// Insert inserts the TermTaxonomy to the database.
func (tt *TermTaxonomy) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if tt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	var sqlstr = `INSERT INTO ` + GetTableName("term_taxonomy") + ` (` +
		`term_id, taxonomy, description, parent, count` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, tt.TermID, tt.Taxonomy, tt.Description, tt.Parent, tt.Count)
	res, err := db.Exec(sqlstr, tt.TermID, tt.Taxonomy, tt.Description, tt.Parent, tt.Count)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	tt.TermTaxonomyID = uint64(id)
	tt._exists = true

	return nil
}

// Update updates the TermTaxonomy in the database.
func (tt *TermTaxonomy) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tt._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if tt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	var sqlstr = `UPDATE ` + GetTableName("term_taxonomy") + ` SET ` +
		`term_id = ?, taxonomy = ?, description = ?, parent = ?, count = ?` +
		` WHERE term_taxonomy_id = ?`

	// run query
	XOLog(sqlstr, tt.TermID, tt.Taxonomy, tt.Description, tt.Parent, tt.Count, tt.TermTaxonomyID)
	_, err = db.Exec(sqlstr, tt.TermID, tt.Taxonomy, tt.Description, tt.Parent, tt.Count, tt.TermTaxonomyID)
	return err
}

// Save saves the TermTaxonomy to the database.
func (tt *TermTaxonomy) Save(db XODB) error {
	if tt.Exists() {
		return tt.Update(db)
	}

	return tt.Insert(db)
}

// Delete deletes the TermTaxonomy from the database.
func (tt *TermTaxonomy) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tt._exists {
		return nil
	}

	// if deleted, bail
	if tt._deleted {
		return nil
	}

	// sql query
	var sqlstr = `DELETE FROM ` + GetTableName("term_taxonomy") + ` WHERE term_taxonomy_id = ?`

	// run query
	XOLog(sqlstr, tt.TermTaxonomyID)
	_, err = db.Exec(sqlstr, tt.TermTaxonomyID)
	if err != nil {
		return err
	}

	// set deleted
	tt._deleted = true

	return nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// TermTaxonomiesByTaxonomy retrieves a row from '` + GetTableName("term_taxonomy") + `' as a TermTaxonomy.
//
// Generated from index 'taxonomy'.
func TermTaxonomiesByTaxonomy(db XODB, taxonomy string) ([]*TermTaxonomy, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`term_taxonomy_id, term_id, taxonomy, description, parent, count ` +
		`FROM ` + GetTableName("term_taxonomy") + ` ` +
		`WHERE taxonomy = ?`

	// run query
	XOLog(sqlstr, taxonomy)
	q, err := db.Query(sqlstr, taxonomy)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*TermTaxonomy{}
	for q.Next() {
		tt := TermTaxonomy{
			_exists: true,
		}

		// scan
		err = q.Scan(&tt.TermTaxonomyID, &tt.TermID, &tt.Taxonomy, &tt.Description, &tt.Parent, &tt.Count)
		if err != nil {
			return nil, err
		}

		res = append(res, &tt)
	}

	return res, nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// TermTaxonomyByTermIDTaxonomy retrieves a row from '` + GetTableName("term_taxonomy") + `' as a TermTaxonomy.
//
// Generated from index 'term_id_taxonomy'.
func TermTaxonomyByTermIDTaxonomy(db XODB, termID uint64, taxonomy string) (*TermTaxonomy, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`term_taxonomy_id, term_id, taxonomy, description, parent, count ` +
		`FROM ` + GetTableName("term_taxonomy") + ` ` +
		`WHERE term_id = ? AND taxonomy = ?`

	// run query
	XOLog(sqlstr, termID, taxonomy)
	tt := TermTaxonomy{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, termID, taxonomy).Scan(&tt.TermTaxonomyID, &tt.TermID, &tt.Taxonomy, &tt.Description, &tt.Parent, &tt.Count)
	if err != nil {
		return nil, err
	}

	return &tt, nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// TermTaxonomyByTermTaxonomyID retrieves a row from '` + GetTableName("term_taxonomy") + `' as a TermTaxonomy.
//
// Generated from index 'term_taxonomy_term_taxonomy_id_pkey'.
func TermTaxonomyByTermTaxonomyID(db XODB, termTaxonomyID uint64) (*TermTaxonomy, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`term_taxonomy_id, term_id, taxonomy, description, parent, count ` +
		`FROM ` + GetTableName("term_taxonomy") + ` ` +
		`WHERE term_taxonomy_id = ?`

	// run query
	XOLog(sqlstr, termTaxonomyID)
	tt := TermTaxonomy{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, termTaxonomyID).Scan(&tt.TermTaxonomyID, &tt.TermID, &tt.Taxonomy, &tt.Description, &tt.Parent, &tt.Count)
	if err != nil {
		return nil, err
	}

	return &tt, nil
}
