// Package wpsapi contains the types for schema 'del'.
// i say package is wpsapi
package wpsapi

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// RegistrationLog represents a row from '` + GetTableName("registration_log") + `'.
type RegistrationLog struct {
	ID             int64     `json:"ID"`              // ID
	Email          string    `json:"email"`           // email
	IP             string    `json:"IP"`              // IP
	BlogID         int64     `json:"blog_id"`         // blog_id
	DateRegistered time.Time `json:"date_registered"` // date_registered

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the RegistrationLog exists in the database.
func (rl *RegistrationLog) Exists() bool {
	return rl._exists
}

// Deled provides information if the RegistrationLog has been deled from the database.
func (rl *RegistrationLog) Deled() bool {
	return rl._deleted
}

// Insert inserts the RegistrationLog to the database.
func (rl *RegistrationLog) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if rl._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	var sqlstr = `INSERT INTO ` + GetTableName("registration_log") + ` (` +
		`email, IP, blog_id, date_registered` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, rl.Email, rl.IP, rl.BlogID, rl.DateRegistered)
	res, err := db.Exec(sqlstr, rl.Email, rl.IP, rl.BlogID, rl.DateRegistered)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	rl.ID = int64(id)
	rl._exists = true

	return nil
}

// Update updates the RegistrationLog in the database.
func (rl *RegistrationLog) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rl._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if rl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	var sqlstr = `UPDATE ` + GetTableName("registration_log") + ` SET ` +
		`email = ?, IP = ?, blog_id = ?, date_registered = ?` +
		` WHERE ID = ?`

	// run query
	XOLog(sqlstr, rl.Email, rl.IP, rl.BlogID, rl.DateRegistered, rl.ID)
	_, err = db.Exec(sqlstr, rl.Email, rl.IP, rl.BlogID, rl.DateRegistered, rl.ID)
	return err
}

// Save saves the RegistrationLog to the database.
func (rl *RegistrationLog) Save(db XODB) error {
	if rl.Exists() {
		return rl.Update(db)
	}

	return rl.Insert(db)
}

// Delete deletes the RegistrationLog from the database.
func (rl *RegistrationLog) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rl._exists {
		return nil
	}

	// if deleted, bail
	if rl._deleted {
		return nil
	}

	// sql query
	var sqlstr = `DELETE FROM ` + GetTableName("registration_log") + ` WHERE ID = ?`

	// run query
	XOLog(sqlstr, rl.ID)
	_, err = db.Exec(sqlstr, rl.ID)
	if err != nil {
		return err
	}

	// set deleted
	rl._deleted = true

	return nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// RegistrationLogsByIP retrieves a row from '` + GetTableName("registration_log") + `' as a RegistrationLog.
//
// Generated from index 'IP'.
func RegistrationLogsByIP(db XODB, ip string) ([]*RegistrationLog, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`ID, email, IP, blog_id, date_registered ` +
		`FROM ` + GetTableName("registration_log") + ` ` +
		`WHERE IP = ?`

	// run query
	XOLog(sqlstr, ip)
	q, err := db.Query(sqlstr, ip)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RegistrationLog{}
	for q.Next() {
		rl := RegistrationLog{
			_exists: true,
		}

		// scan
		err = q.Scan(&rl.ID, &rl.Email, &rl.IP, &rl.BlogID, &rl.DateRegistered)
		if err != nil {
			return nil, err
		}

		res = append(res, &rl)
	}

	return res, nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// RegistrationLogByID retrieves a row from '` + GetTableName("registration_log") + `' as a RegistrationLog.
//
// Generated from index 'registration_log_ID_pkey'.
func RegistrationLogByID(db XODB, id int64) (*RegistrationLog, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`ID, email, IP, blog_id, date_registered ` +
		`FROM ` + GetTableName("registration_log") + ` ` +
		`WHERE ID = ?`

	// run query
	XOLog(sqlstr, id)
	rl := RegistrationLog{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&rl.ID, &rl.Email, &rl.IP, &rl.BlogID, &rl.DateRegistered)
	if err != nil {
		return nil, err
	}

	return &rl, nil
}
