// Package wpsapi contains the types for schema 'del'.
// i say package is wpsapi
package wpsapi

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Link represents a row from '` + GetTableName("links") + `'.
type Link struct {
	LinkID          uint64    `json:"link_id"`          // link_id
	LinkURL         string    `json:"link_url"`         // link_url
	LinkName        string    `json:"link_name"`        // link_name
	LinkImage       string    `json:"link_image"`       // link_image
	LinkTarget      string    `json:"link_target"`      // link_target
	LinkDescription string    `json:"link_description"` // link_description
	LinkVisible     string    `json:"link_visible"`     // link_visible
	LinkOwner       uint64    `json:"link_owner"`       // link_owner
	LinkRating      int       `json:"link_rating"`      // link_rating
	LinkUpdated     time.Time `json:"link_updated"`     // link_updated
	LinkRel         string    `json:"link_rel"`         // link_rel
	LinkNotes       string    `json:"link_notes"`       // link_notes
	LinkRss         string    `json:"link_rss"`         // link_rss

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Link exists in the database.
func (l *Link) Exists() bool {
	return l._exists
}

// Deled provides information if the Link has been deled from the database.
func (l *Link) Deled() bool {
	return l._deleted
}

// Insert inserts the Link to the database.
func (l *Link) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if l._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	var sqlstr = `INSERT INTO ` + GetTableName("links") + ` (` +
		`link_url, link_name, link_image, link_target, link_description, link_visible, link_owner, link_rating, link_updated, link_rel, link_notes, link_rss` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, l.LinkURL, l.LinkName, l.LinkImage, l.LinkTarget, l.LinkDescription, l.LinkVisible, l.LinkOwner, l.LinkRating, l.LinkUpdated, l.LinkRel, l.LinkNotes, l.LinkRss)
	res, err := db.Exec(sqlstr, l.LinkURL, l.LinkName, l.LinkImage, l.LinkTarget, l.LinkDescription, l.LinkVisible, l.LinkOwner, l.LinkRating, l.LinkUpdated, l.LinkRel, l.LinkNotes, l.LinkRss)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	l.LinkID = uint64(id)
	l._exists = true

	return nil
}

// Update updates the Link in the database.
func (l *Link) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if l._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	var sqlstr = `UPDATE ` + GetTableName("links") + ` SET ` +
		`link_url = ?, link_name = ?, link_image = ?, link_target = ?, link_description = ?, link_visible = ?, link_owner = ?, link_rating = ?, link_updated = ?, link_rel = ?, link_notes = ?, link_rss = ?` +
		` WHERE link_id = ?`

	// run query
	XOLog(sqlstr, l.LinkURL, l.LinkName, l.LinkImage, l.LinkTarget, l.LinkDescription, l.LinkVisible, l.LinkOwner, l.LinkRating, l.LinkUpdated, l.LinkRel, l.LinkNotes, l.LinkRss, l.LinkID)
	_, err = db.Exec(sqlstr, l.LinkURL, l.LinkName, l.LinkImage, l.LinkTarget, l.LinkDescription, l.LinkVisible, l.LinkOwner, l.LinkRating, l.LinkUpdated, l.LinkRel, l.LinkNotes, l.LinkRss, l.LinkID)
	return err
}

// Save saves the Link to the database.
func (l *Link) Save(db XODB) error {
	if l.Exists() {
		return l.Update(db)
	}

	return l.Insert(db)
}

// Delete deletes the Link from the database.
func (l *Link) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return nil
	}

	// if deleted, bail
	if l._deleted {
		return nil
	}

	// sql query
	var sqlstr = `DELETE FROM ` + GetTableName("links") + ` WHERE link_id = ?`

	// run query
	XOLog(sqlstr, l.LinkID)
	_, err = db.Exec(sqlstr, l.LinkID)
	if err != nil {
		return err
	}

	// set deleted
	l._deleted = true

	return nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// LinksByLinkVisible retrieves a row from '` + GetTableName("links") + `' as a Link.
//
// Generated from index 'link_visible'.
func LinksByLinkVisible(db XODB, linkVisible string) ([]*Link, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`link_id, link_url, link_name, link_image, link_target, link_description, link_visible, link_owner, link_rating, link_updated, link_rel, link_notes, link_rss ` +
		`FROM ` + GetTableName("links") + ` ` +
		`WHERE link_visible = ?`

	// run query
	XOLog(sqlstr, linkVisible)
	q, err := db.Query(sqlstr, linkVisible)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Link{}
	for q.Next() {
		l := Link{
			_exists: true,
		}

		// scan
		err = q.Scan(&l.LinkID, &l.LinkURL, &l.LinkName, &l.LinkImage, &l.LinkTarget, &l.LinkDescription, &l.LinkVisible, &l.LinkOwner, &l.LinkRating, &l.LinkUpdated, &l.LinkRel, &l.LinkNotes, &l.LinkRss)
		if err != nil {
			return nil, err
		}

		res = append(res, &l)
	}

	return res, nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// LinkByLinkID retrieves a row from '` + GetTableName("links") + `' as a Link.
//
// Generated from index 'links_link_id_pkey'.
func LinkByLinkID(db XODB, linkID uint64) (*Link, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`link_id, link_url, link_name, link_image, link_target, link_description, link_visible, link_owner, link_rating, link_updated, link_rel, link_notes, link_rss ` +
		`FROM ` + GetTableName("links") + ` ` +
		`WHERE link_id = ?`

	// run query
	XOLog(sqlstr, linkID)
	l := Link{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, linkID).Scan(&l.LinkID, &l.LinkURL, &l.LinkName, &l.LinkImage, &l.LinkTarget, &l.LinkDescription, &l.LinkVisible, &l.LinkOwner, &l.LinkRating, &l.LinkUpdated, &l.LinkRel, &l.LinkNotes, &l.LinkRss)
	if err != nil {
		return nil, err
	}

	return &l, nil
}
