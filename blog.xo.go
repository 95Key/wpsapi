// Package wpsapi contains the types for schema 'del'.
// i say package is wpsapi
package wpsapi

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Blog represents a row from '` + GetTableName("blogs") + `'.
type Blog struct {
	BlogID      int64     `json:"blog_id"`      // blog_id
	SiteID      int64     `json:"site_id"`      // site_id
	Domain      string    `json:"domain"`       // domain
	Path        string    `json:"path"`         // path
	Registered  time.Time `json:"registered"`   // registered
	LastUpdated time.Time `json:"last_updated"` // last_updated
	Public      int8      `json:"public"`       // public
	Archived    int8      `json:"archived"`     // archived
	Mature      int8      `json:"mature"`       // mature
	Spam        int8      `json:"spam"`         // spam
	Deleted     int8      `json:"deleted"`      // deleted
	LangID      int       `json:"lang_id"`      // lang_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Blog exists in the database.
func (b *Blog) Exists() bool {
	return b._exists
}

// Deled provides information if the Blog has been deled from the database.
func (b *Blog) Deled() bool {
	return b._deleted
}

// Insert inserts the Blog to the database.
func (b *Blog) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if b._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	var sqlstr = `INSERT INTO ` + GetTableName("blogs") + ` (` +
		`site_id, domain, path, registered, last_updated, public, archived, mature, spam, deleted, lang_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, b.SiteID, b.Domain, b.Path, b.Registered, b.LastUpdated, b.Public, b.Archived, b.Mature, b.Spam, b.Deleted, b.LangID)
	res, err := db.Exec(sqlstr, b.SiteID, b.Domain, b.Path, b.Registered, b.LastUpdated, b.Public, b.Archived, b.Mature, b.Spam, b.Deleted, b.LangID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	b.BlogID = int64(id)
	b._exists = true

	return nil
}

// Update updates the Blog in the database.
func (b *Blog) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if b._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	var sqlstr = `UPDATE ` + GetTableName("blogs") + ` SET ` +
		`site_id = ?, domain = ?, path = ?, registered = ?, last_updated = ?, public = ?, archived = ?, mature = ?, spam = ?, deleted = ?, lang_id = ?` +
		` WHERE blog_id = ?`

	// run query
	XOLog(sqlstr, b.SiteID, b.Domain, b.Path, b.Registered, b.LastUpdated, b.Public, b.Archived, b.Mature, b.Spam, b.Deleted, b.LangID, b.BlogID)
	_, err = db.Exec(sqlstr, b.SiteID, b.Domain, b.Path, b.Registered, b.LastUpdated, b.Public, b.Archived, b.Mature, b.Spam, b.Deleted, b.LangID, b.BlogID)
	return err
}

// Save saves the Blog to the database.
func (b *Blog) Save(db XODB) error {
	if b.Exists() {
		return b.Update(db)
	}

	return b.Insert(db)
}

// Delete deletes the Blog from the database.
func (b *Blog) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !b._exists {
		return nil
	}

	// if deleted, bail
	if b._deleted {
		return nil
	}

	// sql query
	var sqlstr = `DELETE FROM ` + GetTableName("blogs") + ` WHERE blog_id = ?`

	// run query
	XOLog(sqlstr, b.BlogID)
	_, err = db.Exec(sqlstr, b.BlogID)
	if err != nil {
		return err
	}

	// set deleted
	b._deleted = true

	return nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// BlogByBlogID retrieves a row from '` + GetTableName("blogs") + `' as a Blog.
//
// Generated from index 'blogs_blog_id_pkey'.
func BlogByBlogID(db XODB, blogID int64) (*Blog, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`blog_id, site_id, domain, path, registered, last_updated, public, archived, mature, spam, deleted, lang_id ` +
		`FROM ` + GetTableName("blogs") + ` ` +
		`WHERE blog_id = ?`

	// run query
	XOLog(sqlstr, blogID)
	b := Blog{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, blogID).Scan(&b.BlogID, &b.SiteID, &b.Domain, &b.Path, &b.Registered, &b.LastUpdated, &b.Public, &b.Archived, &b.Mature, &b.Spam, &b.Deleted, &b.LangID)
	if err != nil {
		return nil, err
	}

	return &b, nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// BlogsByDomainPath retrieves a row from '` + GetTableName("blogs") + `' as a Blog.
//
// Generated from index 'domain'.
func BlogsByDomainPath(db XODB, domain string, path string) ([]*Blog, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`blog_id, site_id, domain, path, registered, last_updated, public, archived, mature, spam, deleted, lang_id ` +
		`FROM ` + GetTableName("blogs") + ` ` +
		`WHERE domain = ? AND path = ?`

	// run query
	XOLog(sqlstr, domain, path)
	q, err := db.Query(sqlstr, domain, path)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Blog{}
	for q.Next() {
		b := Blog{
			_exists: true,
		}

		// scan
		err = q.Scan(&b.BlogID, &b.SiteID, &b.Domain, &b.Path, &b.Registered, &b.LastUpdated, &b.Public, &b.Archived, &b.Mature, &b.Spam, &b.Deleted, &b.LangID)
		if err != nil {
			return nil, err
		}

		res = append(res, &b)
	}

	return res, nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// BlogsByLangID retrieves a row from '` + GetTableName("blogs") + `' as a Blog.
//
// Generated from index 'lang_id'.
func BlogsByLangID(db XODB, langID int) ([]*Blog, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`blog_id, site_id, domain, path, registered, last_updated, public, archived, mature, spam, deleted, lang_id ` +
		`FROM ` + GetTableName("blogs") + ` ` +
		`WHERE lang_id = ?`

	// run query
	XOLog(sqlstr, langID)
	q, err := db.Query(sqlstr, langID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Blog{}
	for q.Next() {
		b := Blog{
			_exists: true,
		}

		// scan
		err = q.Scan(&b.BlogID, &b.SiteID, &b.Domain, &b.Path, &b.Registered, &b.LastUpdated, &b.Public, &b.Archived, &b.Mature, &b.Spam, &b.Deleted, &b.LangID)
		if err != nil {
			return nil, err
		}

		res = append(res, &b)
	}

	return res, nil
}
