// Package wpsapi contains the types for schema 'del'.
// i say package is wpsapi
package wpsapi

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/patrickmn/go-cache"

	"util"
)

// Term represents a row from '` + GetTableName("terms") + `'.
type Term struct {
	TermID    uint64 `json:"term_id"`    // term_id
	Name      string `json:"name"`       // name
	Slug      string `json:"slug"`       // slug
	TermGroup int64  `json:"term_group"` // term_group

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Term exists in the database.
func (t *Term) Exists() bool {
	return t._exists
}

// Deled provides information if the Term has been deled from the database.
func (t *Term) Deled() bool {
	return t._deleted
}

// Insert inserts the Term to the database.
func (t *Term) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	var sqlstr = `INSERT INTO ` + GetTableName("terms") + ` (` +
		`name, slug, term_group` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, t.Name, t.Slug, t.TermGroup)
	res, err := db.Exec(sqlstr, t.Name, t.Slug, t.TermGroup)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	t.TermID = uint64(id)
	t._exists = true

	return nil
}

// Update updates the Term in the database.
func (t *Term) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	var sqlstr = `UPDATE ` + GetTableName("terms") + ` SET ` +
		`name = ?, slug = ?, term_group = ?` +
		` WHERE term_id = ?`

	// run query
	XOLog(sqlstr, t.Name, t.Slug, t.TermGroup, t.TermID)
	_, err = db.Exec(sqlstr, t.Name, t.Slug, t.TermGroup, t.TermID)
	return err
}

// Save saves the Term to the database.
func (t *Term) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Insert(db)
}

// Delete deletes the Term from the database.
func (t *Term) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	var sqlstr = `DELETE FROM ` + GetTableName("terms") + ` WHERE term_id = ?`

	// run query
	XOLog(sqlstr, t.TermID)
	_, err = db.Exec(sqlstr, t.TermID)
	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// TermsByName retrieves a row from '` + GetTableName("terms") + `' as a Term.
//
// Generated from index 'name'.
func TermsByName(db XODB, name string) ([]*Term, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`term_id, name, slug, term_group ` +
		`FROM ` + GetTableName("terms") + ` ` +
		`WHERE name = ?`

	// run query
	XOLog(sqlstr, name)
	q, err := db.Query(sqlstr, name)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Term{}
	for q.Next() {
		t := Term{
			_exists: true,
		}

		// scan
		err = q.Scan(&t.TermID, &t.Name, &t.Slug, &t.TermGroup)
		if err != nil {
			return nil, err
		}

		res = append(res, &t)
	}

	return res, nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// TermsBySlug retrieves a row from '` + GetTableName("terms") + `' as a Term.
//
// Generated from index 'slug'.
func TermsBySlug(db XODB, slug string) ([]*Term, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`term_id, name, slug, term_group ` +
		`FROM ` + GetTableName("terms") + ` ` +
		`WHERE slug = ?`

	// run query
	XOLog(sqlstr, slug)
	q, err := db.Query(sqlstr, slug)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Term{}
	for q.Next() {
		t := Term{
			_exists: true,
		}

		// scan
		err = q.Scan(&t.TermID, &t.Name, &t.Slug, &t.TermGroup)
		if err != nil {
			return nil, err
		}

		res = append(res, &t)
	}

	return res, nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// TermByTermID retrieves a row from '` + GetTableName("terms") + `' as a Term.
//
// Generated from index 'terms_term_id_pkey'.
func TermByTermID(db XODB, termID uint64) (*Term, error) {
	v, found := c.Get("/term/term_id/" + util.Uint64ToString(termID))
	if found {
		return v.(*Term), nil
	}
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`term_id, name, slug, term_group ` +
		`FROM ` + GetTableName("terms") + ` ` +
		`WHERE term_id = ?`

	// run query
	XOLog(sqlstr, termID)
	t := Term{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, termID).Scan(&t.TermID, &t.Name, &t.Slug, &t.TermGroup)
	if err != nil {
		return nil, err
	}

	c.Set("/term/term_id/"+util.Uint64ToString(termID), &t, cache.DefaultExpiration)

	return &t, nil
}
