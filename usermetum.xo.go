// Package wpsapi contains the types for schema 'del'.
// i say package is wpsapi
package wpsapi

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Usermetum represents a row from '` + GetTableName("usermeta") + `'.
type Usermetum struct {
	UmetaID   uint64         `json:"umeta_id"`   // umeta_id
	UserID    uint64         `json:"user_id"`    // user_id
	MetaKey   sql.NullString `json:"meta_key"`   // meta_key
	MetaValue sql.NullString `json:"meta_value"` // meta_value

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Usermetum exists in the database.
func (u *Usermetum) Exists() bool {
	return u._exists
}

// Deled provides information if the Usermetum has been deled from the database.
func (u *Usermetum) Deled() bool {
	return u._deleted
}

// Insert inserts the Usermetum to the database.
func (u *Usermetum) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	var sqlstr = `INSERT INTO ` + GetTableName("usermeta") + ` (` +
		`user_id, meta_key, meta_value` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, u.UserID, u.MetaKey, u.MetaValue)
	res, err := db.Exec(sqlstr, u.UserID, u.MetaKey, u.MetaValue)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	u.UmetaID = uint64(id)
	u._exists = true

	return nil
}

// Update updates the Usermetum in the database.
func (u *Usermetum) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	var sqlstr = `UPDATE ` + GetTableName("usermeta") + ` SET ` +
		`user_id = ?, meta_key = ?, meta_value = ?` +
		` WHERE umeta_id = ?`

	// run query
	XOLog(sqlstr, u.UserID, u.MetaKey, u.MetaValue, u.UmetaID)
	_, err = db.Exec(sqlstr, u.UserID, u.MetaKey, u.MetaValue, u.UmetaID)
	return err
}

// Save saves the Usermetum to the database.
func (u *Usermetum) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Delete deletes the Usermetum from the database.
func (u *Usermetum) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	var sqlstr = `DELETE FROM ` + GetTableName("usermeta") + ` WHERE umeta_id = ?`

	// run query
	XOLog(sqlstr, u.UmetaID)
	_, err = db.Exec(sqlstr, u.UmetaID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// UsermetaByMetaKey retrieves a row from '` + GetTableName("usermeta") + `' as a Usermetum.
//
// Generated from index 'meta_key'.
func UsermetaByMetaKey(db XODB, metaKey sql.NullString) ([]*Usermetum, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`umeta_id, user_id, meta_key, meta_value ` +
		`FROM ` + GetTableName("usermeta") + ` ` +
		`WHERE meta_key = ?`

	// run query
	XOLog(sqlstr, metaKey)
	q, err := db.Query(sqlstr, metaKey)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Usermetum{}
	for q.Next() {
		u := Usermetum{
			_exists: true,
		}

		// scan
		err = q.Scan(&u.UmetaID, &u.UserID, &u.MetaKey, &u.MetaValue)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// UsermetaByUserID retrieves a row from '` + GetTableName("usermeta") + `' as a Usermetum.
//
// Generated from index 'user_id'.
func UsermetaByUserID(db XODB, userID uint64) ([]*Usermetum, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`umeta_id, user_id, meta_key, meta_value ` +
		`FROM ` + GetTableName("usermeta") + ` ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Usermetum{}
	for q.Next() {
		u := Usermetum{
			_exists: true,
		}

		// scan
		err = q.Scan(&u.UmetaID, &u.UserID, &u.MetaKey, &u.MetaValue)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

//{ {- $table := (schema .Schema .Type.Table.TableName) -} }// UsermetumByUmetaID retrieves a row from '` + GetTableName("usermeta") + `' as a Usermetum.
//
// Generated from index 'usermeta_umeta_id_pkey'.
func UsermetumByUmetaID(db XODB, umetaID uint64) (*Usermetum, error) {
	var err error

	// sql query
	var sqlstr = `SELECT ` +
		`umeta_id, user_id, meta_key, meta_value ` +
		`FROM ` + GetTableName("usermeta") + ` ` +
		`WHERE umeta_id = ?`

	// run query
	XOLog(sqlstr, umetaID)
	u := Usermetum{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, umetaID).Scan(&u.UmetaID, &u.UserID, &u.MetaKey, &u.MetaValue)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
